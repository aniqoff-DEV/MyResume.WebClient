@using MyResume.WebClient.Application.Responses.BranchResponses
@implements IDialogContentComponent<BranchResponse>
@inject IBranchService branchService

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>
    <FluentSelect TOption="BranchResponse"
                  Label="Выберите город"
                  Items="Branches"
                  Width="300px"
                  Height="200px"
                  OptionText="@(p => p.Name)"
                  @bind-SelectedOption="@Content" />
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  OnClick="@SaveAsync">
        Применть
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral"
                  OnClick="@CancelAsync">
        Отмена
    </FluentButton>
</FluentDialogFooter>

@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    [Parameter]
    public BranchResponse Content { get; set; } = default!;

    private List<BranchResponse> Branches { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Branches = await LoadCities();
    }

    public async Task<List<BranchResponse>> LoadCities()
    {
        var branches = await branchService.GetAll();
        return branches;
    }

    private async Task SaveAsync()
    {
        await Dialog.CloseAsync(Content);
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}

