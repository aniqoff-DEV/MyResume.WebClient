@page "/resume"
@inject IJobSeekerService jobSeekerService
@using MyResume.WebClient.Application.Responses.JobSeekerResponses
@using MyResume.WebClient.Application.Services
@using Markdig;

<PageTitle>Резюме: @JobSeeker!.FullName @(JobSeeker!.Branch ?? "")</PageTitle>

<FluentStack Orientation="Orientation.Vertical" Class="rounded" Style="background-color: white; width:80%; margin-top:10px; padding:20px;">
    @if (JobSeeker is null)
    {
        <InfoSkeleton/>
    }
    else
    {
        @* Info *@
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentPersona Status="PresenceStatus.Available"
                           ImageSize="50px"
                           Image="@imageDataURL"
                           Initials="LY">
            </FluentPersona>
            <FluentLabel MarginBlock="1px" Typo="Typography.H1" Color="Color.Success">@JobSeeker!.FullName</FluentLabel>
            <FluentLabel MarginBlock="1px" Typo="Typography.H1" Color="Color.Accent">@(JobSeeker!.Branch ?? "")</FluentLabel>
        </FluentStack>
        <FluentDivider Style="width: 100%;" Orientation=Orientation.Horizontal Role="DividerRole.Separator"></FluentDivider>

        <FluentLabel MarginBlock="1px" Typo="Typography.H2">@(JobSeeker.City ?? "")</FluentLabel>
        <FluentLabel MarginBlock="1px" Typo="Typography.H3">@(JobSeeker.DesiredSalary != null ? $" Желаемая зарплата: {JobSeeker.DesiredSalary.ToString().Insert(3, " ")} р." : "")</FluentLabel>

        @* Description *@
        <FluentLabel Typo="Typography.H5" Color="Color.Warning">
            @JobSeeker!.Description
        </FluentLabel>

        <FluentDivider Style="width: 100%;" Orientation=Orientation.Horizontal Role="DividerRole.Separator"></FluentDivider>

        @* Resume *@
        <FluentBodyContent>
            @MarkDownText
        </FluentBodyContent>
    }    
</FluentStack>


@code{
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid Id { get; set; }

    public InfoOnPageJobSeekerResponse? JobSeeker { get; set; }
    private MarkupString MarkDownText { get; set; }
    private string imageDataURL { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            JobSeeker = await jobSeekerService.GetInfoOnPageById(Id);
            if(JobSeeker.Resume is not null)
                MarkDownText = (MarkupString)Markdown.ToHtml(ReadForBytesFromText(JobSeeker.Resume));

            if(JobSeeker.Avatar is not null)
            {
                var imagesrc = Convert.ToBase64String(JobSeeker.Avatar);
                imageDataURL = string.Format("data:image/jpeg+jpg+png;base64,{0}", imagesrc);
            }
        }
        catch (Exception ex)
        {
            Navigation.NavigateTo($"/404{ex.Message}");
        }
    }

    private string ReadForBytesFromText(byte[] byteArray)
    {
        var stream = new StreamReader(new MemoryStream(byteArray));

        var text = stream.ReadToEnd();
        return text;
    }
}
